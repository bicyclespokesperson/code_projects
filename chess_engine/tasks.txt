Benchmark if 64 bit Move is actually slower than 32 bit move

Implement draws
  stalemate
  3fold repitition
  50 moves rule
  insufficient material

Search
  Iterative deepening
    Measure alpha/beta success rate? ID ostensibly speeds up search by improving that
  Transposition table
    Zobrist hashing
  Move ordering
    Moves may need more infomation added to them for move ordering
      MVV/LVA and/or SEE
  Better quiescence search
    https://chess.stackexchange.com/questions/27257/chess-engine-quiescence-search-increases-required-time-by-a-factor-of-20



Implement quiesence search

This article is good, might also want to just look at the source code for the engine
https://www.rhysre.net/fast-chess-move-generation-with-magic-bitboards.html

Article on legal move generation
https://peterellisjones.com/posts/generating-legal-chess-moves-efficiently/

Another good look at move generation
  Contains pesudocode for bitboard -> move function
https://www.josherv.in/2021/03/19/chess-1/

https://www.chessprogramming.org/Classical_Approach
https://www.chessprogramming.org/Bitboard_Board-Definition
https://www.chessprogramming.org/Efficient_Generation_of_Sliding_Piece_Attacks#Bitboard_Board-Definition
https://www.chessprogramming.org/General_Setwise_Operations#UpdateByMove

Integrated UCI protocol using
  https://github.com/zd3nik/SenjoUCIAdapter

qperft runs at 170,000,000 nodes/sec on my macbook
Stockfish is somewhere around 120,000,000 nodes/sec (very rough estimate)
Python chess lib is 60,000 nodes/sec
My perft implementation runs at 7,000,000 by comparison

Adding a simple move ordering (sort by victim value - attacker value) Dropped my searched nodes from 3.8M to 1.5M for black's first move after 1. e4

WORST CODE OF ALL TIME
https://home.hccnet.nl/h.g.muller/delay.html

